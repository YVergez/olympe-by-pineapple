(* --- MISC -- *)
(* Define global references *)
let img_src      = ref "" 
and pre_img_src  = ref "resources/tmp/pre_img.bmp"
and inter        = ref 10
and obj_file_src = ref "resources/tmp/final_obj.obj"
and prog_state   = 0
and window       = ref GObj.GtkWidget.widget

(*An useless fonction*)
let void () = ()
	  
(*Terminate application*)
let destroy () =
  GMain.Main.quit ()

(*Ask the user if he really want to terminate the application*)
let ask_destroy ev =
  let ask_dialog = GWindow.message_dialog
    ~modal:true
    ~message:"Do you really want to exit the application ?"
    ~use_markup:true
    ~message_type:`INFO
    ~buttons:GWindow.Buttons.yes_no
    ~destroy_with_parent:true
    ~title:"Quit ?"
    ~deletable:false
    ~focus_on_map:true
    ~position:`CENTER_ON_PARENT
    ~resizable:false
    ~show:true () in
    match ask_dialog#run () with
      | `YES -> 
	  destroy (); (*bricolage pour gérer la fermeture à partir du menu*)
	  false
      | _    ->
	  ask_dialog#destroy ();
	  true

(*Create the main window*)
let create_main_window () =
  let window = GWindow.window
    ~position:`CENTER
    ~width:800
    ~height:600
    ~resizable:true
    ~allow_grow:true
    ~allow_shrink:true
    ~title:"Olympe pre-beta GUI" () in
    window#event#connect#delete ~callback:ask_destroy;
    window#event#connect#destroy ~callback:ask_destroy;
    window#connect#destroy ~callback:destroy;
    window

(* --- MENU BAR --- *)
(*Add a item from stocks to menu*)
let add_stock_item menu ~stock ~callback () =
  let item = GMenu.image_menu_item
    ~stock
    ~packing:menu#append () in 
    item#connect#activate ~callback;
    item

(*Add a separator item to menu*)
let add_separator menu () =
  GMenu.separator_item
    ~packing:menu#append ()

(*Add a submenu to menu*)
let add_submenu menu ~label ~filename ~subitems () =
  let icon = GMisc.image
    ~file:("resources/menu/" ^ filename) () in
  let item = GMenu.image_menu_item
    ~label
    ~image:icon
    ~packing:menu#append () in
  let submenu = GMenu.menu
    ~packing:item#set_submenu () in
  let create_subitem (label, callback) =
    let subitem = GMenu.menu_item
      ~label:label
      ~packing:submenu#append () in
      subitem#connect#activate ~callback:callback; ();
  in
    List.iter create_subitem subitems

(*Create the main menu bar (a the top of the window*)
let create_main_menubar ~packing ~window =
  let menu_bar = GMenu.menu_bar
    ~packing () in

  (*Déclaration du menu File*)
  let menu_file_title = GMenu.menu_item 
    ~label:"File"
    ~packing:menu_bar#append () in
  let menu_file = GMenu.menu
    ~packing:menu_file_title#set_submenu () in

  (*Déclaration du menu View*)
  let menu_view_title = GMenu.menu_item 
    ~label:"View"
    ~packing:menu_bar#append () in
  let menu_view = GMenu.menu
    ~packing:menu_view_title#set_submenu () in
  
  (*Déclaration du menu Help*)
  let menu_help_title = GMenu.menu_item 
    ~label:"?"
    ~packing:menu_bar#append () in
  let menu_help = GMenu.menu
    ~packing:menu_help_title#set_submenu () in

    add_stock_item menu_file ~stock:`NEW  ~callback:void ();
    add_separator menu_file ();
    let exit_item =
      add_stock_item menu_file ~stock:`QUIT ~callback:destroy ()
    in
      exit_item#event#connect#button_release ~callback:ask_destroy;

      add_submenu menu_view
	~label:"View mode"
	~filename:"eye.png"   
	~subitems:[("Free",void);
		   ("First person",void)] ();
      add_submenu menu_view
	~label:"Display mode"
	~filename:"display.png"
	~subitems:[("Wireframe",void);
		   ("Plain",void)] ();
      add_submenu menu_view
	~label:"Camera"        
	~filename:"cam.png"
	~subitems:[("Rotate...",void);
		   ("Scale...",void);
		   ("Zoom...",void);
		   ("Position...",void)] ();
      add_submenu menu_view
	~label:"Light"    
	~filename:"light.png"
	~subitems:[("Color...",void);
		   ("Rotate...",void);
		   ("Position",void)] ();
      
      add_stock_item menu_help ~stock:`ABOUT ~callback:void ();
      add_stock_item menu_help ~stock:`HELP  ~callback:void ();
      menu_view_title#misc#set_sensitive false;
      [|menu_file_title;menu_view_title;menu_help_title|]
      
(* --- STATUS BAR --- *)
let create_status_bar ~packing =
  let statbar = GMisc.statusbar
    ~has_resize_grip:true
    ~packing () in
    statbar#new_context ~name:"Information display"

(* ---  LablGL --- *)
let create_gl_area ~packing ?show () =
  let area = GlGtk.area
    [`RGBA;`DEPTH_SIZE 1;`DOUBLEBUFFER]
    ~width:500
    ~height:500 
    ?show
    ~packing () in
    area

(* --- SIDEBAR --- *)
let create_sidebar ~packing () =
  let appercu_area = GBin.frame
    ~width:200
    ~height:200
    ~border_width:5
    ~packing () in
  let appercu = GMisc.image
    ~file:"resources/sidebar/appercu.bmp"
    ~packing:appercu_area#add () in
    appercu#clear ()

(* --- TOOLBAR --- *)
let create_toolbar_pretreatment ~packing () =
  let toolbar = GButton.toolbar
    ~orientation:`HORIZONTAL
    ~style:`BOTH
    ~height:80
    ~packing () in
    toolbar#insert_button
      ~text:"Open image"
      ~icon:(GMisc.image
	       ~file:"resources/toolbar/insert-image.svg" ())#coerce
      ~tooltip:"Open an image file"
      ~callback:void ();
    toolbar#insert_space ();
    toolbar#insert_button
      ~text:"Help"
      ~icon:(GMisc.image
	       ~file:"resources/toolbar/help.svg" ())#coerce
      ~tooltip:"Get help"
      ~callback:void ();
    toolbar

let create_toolbar_sampling ~packing () =
  let toolbar = GButton.toolbar
    ~orientation:`HORIZONTAL
    ~style:`BOTH
    ~height:80
    ~show:false
    ~packing () in
    toolbar#insert_button
      ~text:"Save image"
      ~icon:(GMisc.image
	       ~file:"resources/toolbar/document-save.svg" ())#coerce
      ~tooltip:"Save the treated file"
      ~callback:void ();
    toolbar#insert_space ();
    toolbar#insert_button
      ~text:"Help"
      ~icon:(GMisc.image
	       ~file:"resources/toolbar/help.svg" ())#coerce
      ~tooltip:"Get help"
      ~callback:void ();
    toolbar

let create_toolbar_3d ~packing () =
  let toolbar = GButton.toolbar
    ~orientation:`HORIZONTAL
    ~style:`BOTH
    ~height:80
    ~show:false
    ~packing () in
    toolbar#insert_button
      ~text:"Save 3D file"
      ~icon:(GMisc.image
	       ~file:"resources/toolbar/document-save.svg" ())#coerce
      ~tooltip:"Save the .obj file"
      ~callback:void ();
    toolbar#insert_space ();
    toolbar#insert_button
      ~text:"Free view"
      ~icon:(GMisc.image
	       ~file:"resources/toolbar/view-fullscreen.svg" ())#coerce
      ~tooltip:"Set view free"
      ~callback:void ();
    toolbar#insert_button
      ~text:"First person view"
      ~icon:(GMisc.image
	       ~file:"resources/toolbar/eyes.png" ())#coerce
      ~tooltip:"Set view as first person"
      ~callback:void ();
    toolbar#insert_space ();
    toolbar#insert_button
      ~text:"Help"
      ~icon:(GMisc.image
	       ~file:"resources/toolbar/help.svg" ())#coerce
      ~tooltip:"Get help"
      ~callback:void ();
    toolbar

(* --- CHANGING GUI APPEARANCE --- *)
let update_gui_status state
    ~menubar ~toolbars ~sidebar
    ~img ~pre_img ~gl_area
    ~status () = 
  let hide toolbar =
    toolbar#misc#hide () in
  match state with
      0 ->
	begin
	  (menubar.(1))#misc#set_sensitive false;
	  Array.iter hide toolbars;
	  (toolbars.(0))#misc#show ();
	  img#misc#hide ();
	  pre_img#misc#hide ();
	  gl_area#misc#hide ();
	end
    | 1 ->
	begin
	  (menubar.(1))#misc#set_sensitive false;
	  Array.iter hide toolbars;
	  (toolbars.(0))#misc#show ();
	  img#misc#show ();
	  pre_img#misc#hide ();
	  gl_area#misc#hide ();
	end
    | 2 ->
	begin
	  (menubar.(1))#misc#set_sensitive false;
	  Array.iter hide toolbars;
	  (toolbars.(1))#misc#show ();
	  img#misc#hide ();
	  pre_img#misc#show ();
	  gl_area#misc#hide ();
	  if prog_state = 1 then
	    begin
	    end
	end
    | 3 ->
	begin
	  (menubar.(1))#misc#set_sensitive true;
	  Array.iter hide toolbars;
	  (toolbars.(2))#misc#show ();
	  img#misc#hide ();
	  pre_img#misc#hide ();
	  gl_area#misc#show ();
	end	
    | _ -> ()


(* --- STATE BUTTONS --- *)
let create_state_buttons ~packing
    ~menubar ~toolbars ~sidebar
    ~img ~pre_img ~gl_area
    ~status () =
  let button1 = GButton.button
    ~label:"1 Pre-treatment"
    ~packing () 
  and button2 = GButton.button
    ~label:"2. Sampling"
    ~packing ()
  and button3 = GButton.button
    ~label:"3. 3D view"
    ~packing () in
    
  let buttons = [|button1;button2;button3|] in
    Array.iter (fun b -> b#misc#set_sensitive false) buttons;

    buttons.(0)#connect#clicked ~callback:(
      update_gui_status 1
	~menubar ~toolbars ~sidebar
	~img ~pre_img ~gl_area
	~status);

    buttons.(1)#connect#clicked ~callback:(
      update_gui_status 2
	~menubar ~toolbars ~sidebar
	~img ~pre_img ~gl_area
	~status);

    buttons.(2)#connect#clicked ~callback:(
      update_gui_status 3
	~menubar ~toolbars ~sidebar
	~img ~pre_img ~gl_area
	~status);
	
      buttons

    

let activate_state_button i ~buttons () =
  buttons.(i)#set_image (GMisc.image
			   ~file:"resources/statebar/ok.png");
  buttons.(i)#connect#pressed ~callback:void


(* --- GUI INIT --- *)
let init () =

  (* widgets witch do not change along the program execution *)
  let window = create_main_window () in

  let main_vbox = GPack.vbox
    ~homogeneous:false
    ~packing:window#add () in

  (* theses widgets may change according to status of the program *) 
  let main_menu_bar = create_main_menubar
    ~packing:(main_vbox#pack ~expand:false) ~window:window in

  let toolbars = [|
    (create_toolbar_pretreatment ~packing:(main_vbox#pack ~expand:false) ());
    (create_toolbar_sampling ~packing:(main_vbox#pack ~expand:false) ());
    (create_toolbar_3d ~packing:(main_vbox#pack ~expand:false) ())|]
  in

  let program_state_hbox = GPack.hbox
    ~homogeneous:true
    ~height:34
    ~border_width:2
    ~packing:(main_vbox#pack ~expand:false) () in

  let main_view_hbox = GPack.hbox
    ~packing:main_vbox#add () in

  let sidebar_vbox = GPack.vbox
    ~width:220
    ~border_width:10
    ~packing:(main_view_hbox#pack ~expand:false) () in
    create_sidebar ~packing:(sidebar_vbox#pack ~expand:false) ();

  let status_bar = create_status_bar
    ~packing:(main_vbox#pack ~expand:false) in
    
  (* Declaration of 3 components of main view *)
  let img = GMisc.image
    ~file:!img_src
    ~packing:main_view_hbox#add
    ~show:false ()
  and pre_img = GMisc.image
    ~file:!pre_img_src
    ~packing:main_view_hbox#add
    ~show:false ()
  and gl_area = create_gl_area
    ~packing:main_view_hbox#add
    ~show:false () in
    
  let state_buttons = create_state_buttons
    ~packing:program_state_hbox#add
    ~menubar:main_menu_bar
    ~toolbars:toolbars
    ~sidebar:sidebar_vbox
    ~img:img
    ~pre_img:pre_img
    ~gl_area:gl_area
    ~status:status_bar () in

    window#show ();
